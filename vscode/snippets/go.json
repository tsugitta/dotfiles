{
  "fenwick": {
    "prefix": "fenwick",
    "body": [
      "type Fenwick struct {",
      "\ttree []int",
      "}",
      "",
      "func NewFenwick(n int) *Fenwick {",
      "\treturn &Fenwick{",
      "\t\ttree: make([]int, n),",
      "\t}",
      "}",
      "",
      "// sum of [0, i)",
      "func (f *Fenwick) Sum(i int) (sum int) {",
      "\tfor i--; i >= 0; i = (i & (i + 1)) - 1 {",
      "\t\tsum += f.tree[i]",
      "\t}",
      "",
      "\treturn",
      "}",
      "",
      "func (f *Fenwick) Add(i, n int) {",
      "\tfor l := len(f.tree); i < l; i |= i + 1 {",
      "\t\tf.tree[i] += n",
      "\t}",
      "}",
      ""
    ],
    "description": "fenwick"
  },
  "pq": {
    "prefix": "pq",
    "body": [
      "type PQ []int",
      "",
      "func (pq *PQ) Len() int { return len(*pq) }",
      "",
      "// less なものから pop される",
      "func (pq *PQ) Less(i, j int) bool    { return (*pq)[i] < (*pq)[j] }",
      "func (pq *PQ) Swap(i, j int)         { (*pq)[i], (*pq)[j] = (*pq)[j], (*pq)[i] }",
      "func (pq *PQ) Push(item interface{}) { *pq = append(*pq, item.(int)) }",
      "",
      "func (pq *PQ) Pop() interface{} {",
      "\told := *pq",
      "\tn := len(old)",
      "\titem := old[n-1]",
      "\t// heap.Pop 直前に取り出されるべき要素が先頭から末尾に移動する",
      "\t*pq = old[0 : n-1]",
      "\treturn item",
      "}",
      ""
    ],
    "description": "pq"
  },
  "uf": {
    "prefix": "uf",
    "body": [
      "type UnionFind struct {",
      "\t// for children, the value is its parent index. for root, the value is -1 * the size of the group",
      "\tparents []int",
      "}",
      "",
      "func (uf *UnionFind) init(n int) {",
      "\tuf.parents = make([]int, n)",
      "",
      "\tfor i := range uf.parents {",
      "\t\tuf.parents[i] = -1",
      "\t}",
      "}",
      "",
      "func (uf *UnionFind) root(x int) int {",
      "\tif uf.parents[x] < 0 {",
      "\t\treturn x",
      "\t}",
      "",
      "\tr := uf.root(uf.parents[x])",
      "\tuf.parents[x] = r",
      "\treturn r",
      "}",
      "",
      "func (uf *UnionFind) same(x, y int) bool {",
      "\treturn uf.root(x) == uf.root(y)",
      "}",
      "",
      "func (uf *UnionFind) merge(x, y int) {",
      "\txr := uf.root(x)",
      "\tyr := uf.root(y)",
      "",
      "\tif xr == yr {",
      "\t\treturn",
      "\t}",
      "",
      "\t// make less index one as a root",
      "\tif xr > yr {",
      "\t\txr, yr = yr, xr",
      "\t}",
      "",
      "\tuf.parents[xr] += uf.parents[yr]",
      "\tuf.parents[yr] = xr",
      "}",
      "",
      "func (uf *UnionFind) size(x int) int {",
      "\treturn -uf.parents[uf.root(x)]",
      "}",
      "",
      "func (uf *UnionFind) groupCount() (res int) {",
      "\tfor _, parent := range uf.parents {",
      "\t\tif parent < 0 {",
      "\t\t\tres++",
      "\t\t}",
      "\t}",
      "",
      "\treturn",
      "}",
      ""
    ],
    "description": "pq"
  },
  "patternmatch": {
    "prefix": "patternmatch",
    "body": [
      "// O(|s|)",
      "func zAlgorithm(s string) []int {",
      "\tn := len(s)",
      "\tz := make([]int, n)",
      "\tz[0] = n",
      "\tfor i, j := 1, 0; i < n; {",
      "\t\tfor i+j < n && s[j:j+1] == s[i+j:i+j+1] {",
      "\t\t\tj++",
      "\t\t}",
      "",
      "\t\tz[i] = j",
      "",
      "\t\tif j == 0 {",
      "\t\t\ti++",
      "\t\t\tcontinue",
      "\t\t}",
      "",
      "\t\tk := 1",
      "",
      "\t\tfor ; i+k < n && k+z[k] < j; k++ {",
      "\t\t\tz[i+k] = z[k]",
      "\t\t}",
      "",
      "\t\ti, j = i+k, j-k",
      "\t}",
      "\treturn z",
      "}",
      "",
      "func getPatternIndices(s, pat string) (res []int) {",
      "\targ := pat + s",
      "\tz := zAlgorithm(arg)",
      "\tls := len(s)",
      "\tlp := len(pat)",
      "",
      "\tfor i := 0; i < ls; i++ {",
      "\t\tif z[lp+i] >= lp {",
      "\t\t\tres = append(res, i)",
      "\t\t}",
      "\t}",
      "",
      "\treturn",
      "}",
      ""
    ],
    "description": "patternmatch"
  },
  "topological": {
    "prefix": "topological",
    "body": [
      "type TopologicalSort struct {",
      "\tedges   [][]int",
      "\tinCount []int",
      "}",
      "",
      "func (t *TopologicalSort) init(n int) {",
      "\tt.edges = make([][]int, n)",
      "\tt.inCount = make([]int, n)",
      "}",
      "",
      "func (t *TopologicalSort) add(from, to int) {",
      "\tt.edges[from] = append(t.edges[from], to)",
      "}",
      "",
      "func (t *TopologicalSort) sort() (res []int, isLoop bool) {",
      "\t// 全ての nodes の入次数をカウント O(E)",
      "\tfor _, edgesForNode := range t.edges {",
      "\t\tfor _, to := range edgesForNode {",
      "\t\t\tt.inCount[to]++",
      "\t\t}",
      "\t}",
      "",
      "\t// inCount が 0 のものの集合",
      "\ts := []int{}",
      "",
      "\tfor node, in := range t.inCount {",
      "\t\tif in == 0 {",
      "\t\t\ts = append(s, node)",
      "\t\t}",
      "\t}",
      "",
      "\tfor len(s) > 0 {",
      "\t\tpopped := s[0]",
      "\t\tres = append(res, popped)",
      "\t\ts = s[1:len(s)]",
      "",
      "\t\tfor _, to := range t.edges[popped] {",
      "\t\t\tt.inCount[to]--",
      "",
      "\t\t\tif t.inCount[to] == 0 {",
      "\t\t\t\ts = append(s, to)",
      "\t\t\t}",
      "\t\t}",
      "\t}",
      "",
      "\tif len(res) != len(t.edges) {",
      "\t\tisLoop = true",
      "\t\treturn",
      "\t}",
      "",
      "\treturn",
      "}",
      ""
    ],
    "description": "topological"
  },
  "SegmentTree": {
    "prefix": "segtree",
    "body": [
      "type SegmentTree struct {",
      "\tn         int // 最下段の数",
      "\tnodes     []int",
      "\tzeroValue int",
      "}",
      "",
      "func (st *SegmentTree) calc(a, b int) int {",
      "\t// EDIT HERE",
      "\tif a > b {",
      "\t\treturn b",
      "\t}",
      "",
      "\treturn a",
      "}",
      "",
      "func (st *SegmentTree) init(vs []int, zeroValue int) {",
      "\tst.zeroValue = zeroValue",
      "\tst.n = 1",
      "",
      "\tfor st.n < len(vs) {",
      "\t\tst.n *= 2",
      "\t}",
      "",
      "\tst.nodes = make([]int, 2*st.n-1)",
      "",
      "\tfor i := range st.nodes {",
      "\t\tst.nodes[i] = st.zeroValue",
      "\t}",
      "",
      "\tfor i, v := range vs {",
      "\t\tst.nodes[i+st.n-1] = v",
      "\t}",
      "",
      "\tfor i := st.n - 2; i >= 0; i-- {",
      "\t\tst.nodes[i] = st.calc(st.nodes[i*2+1], st.nodes[i*2+2])",
      "\t}",
      "}",
      "",
      "func (st *SegmentTree) update(i, val int) {",
      "\ti += st.n - 1",
      "\tst.nodes[i] = val",
      "",
      "\tfor i > 0 {",
      "\t\ti = (i - 1) / 2",
      "\t\tst.nodes[i] = st.calc(st.nodes[2*i+1], st.nodes[2*i+2])",
      "\t}",
      "}",
      "",
      "// [from, to)",
      "func (st *SegmentTree) query(from, to int) int {",
      "\treturn st.queryInternal(from, to, 0, 0, st.n)",
      "}",
      "",
      "func (st *SegmentTree) queryInternal(from, to, k, l, r int) int {",
      "\tif r <= from || to <= l {",
      "\t\treturn st.zeroValue",
      "\t}",
      "",
      "\tif from <= l && r <= to {",
      "\t\treturn st.nodes[k]",
      "\t}",
      "",
      "\tvl := st.queryInternal(from, to, 2*k+1, l, (l+r)/2)",
      "\tvr := st.queryInternal(from, to, 2*k+2, (l+r)/2, r)",
      "",
      "\treturn st.calc(vl, vr)",
      "}",
      ""
    ],
    "description": "SegmentTree"
  }
}
